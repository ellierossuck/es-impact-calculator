{"version":3,"sources":["trees.jpg","cars.jpg","beluga.jpg","vegan.jpg","header.jpg","serviceWorker.js","Step1.js","Step2.js","Step3.js","getRandomInt.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","Step1","this","props","currentStep","react_default","a","createElement","Fragment","className","htmlFor","id","name","type","min","step","placeholder","value","calls","onChange","handleChange","React","Component","Step2","emails","Step3","console","log","result","intCalls","Math","floor","intEmails","members","trees","toFixed","replace","cars","whales","vegans","impact","src","alt","height","backToStart","beluga","vegan","getRandomInt","max","random","MasterForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","_next","_prev","_toStart","event","_event$target","target","setState","defineProperty","header","onSubmit","handleSubmit","src_Step1","src_Step2","src_Step3","button","onClick","ReactDOM","render","src_MasterForm","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af7d3a75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trees.09338ed6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cars.40c5ba9a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/beluga.aa7ad411.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vegan.af469000.jpg\";","module.exports = __webpack_public_path__ + \"static/media/header.300174f5.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\n// step 1 (child) component - this is for the ES input (trigger handleChange() function to set value in the state of parent, <MasterForm/>)\r\nclass Step1 extends React.Component {\r\n  render() {\r\n    if (this.props.currentStep !== 1) {\r\n      return null;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"form-input\">\r\n          <h2 className=\"impact\" htmlFor=\"calls\">\r\n            How many calls have you taken today?\r\n          </h2>\r\n          <input\r\n            className=\"input-box\"\r\n            id=\"calls\"\r\n            name=\"calls\"\r\n            type=\"number\"\r\n            min=\"0\"\r\n            step=\"1\"\r\n            placeholder=\"0\"\r\n            value={this.props.calls}\r\n            // props is the number of calls inputted\r\n            onChange={this.props.handleChange}\r\n            // puts data into state\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Step1;\r\n","import React from \"react\";\r\n\r\n// step 2 (child) component - this is for emails\r\nclass Step2 extends React.Component {\r\n  render() {\r\n    if (this.props.currentStep !== 2) {\r\n      return null;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"form-input\">\r\n          <h2 className=\"impact\" htmlFor=\"emails\">\r\n            How many emails have you done today?\r\n          </h2>\r\n          <input\r\n            className=\"input-box\"\r\n            id=\"emails\"\r\n            name=\"emails\"\r\n            type=\"number\"\r\n            min=\"0\"\r\n            step=\"1\"\r\n            placeholder=\"0\"\r\n            value={this.props.emails}\r\n            // props is the number of emails inputted\r\n            onChange={this.props.handleChange}\r\n            // puts data into state\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Step2;\r\n","import React from \"react\";\r\nimport trees from \"./trees.jpg\";\r\nimport cars from \"./cars.jpg\";\r\nimport beluga from \"./beluga.jpg\";\r\nimport vegan from \"./vegan.jpg\";\r\n\r\nclass Step3 extends React.Component {\r\n  render() {\r\n    console.log(this.props.type);\r\n    if (this.props.currentStep !== 3) {\r\n      return null;\r\n    }\r\n    const result = impact(this.props.calls, this.props.emails, this.props.type);\r\n    if (this.props.type === 0) {\r\n      return (\r\n        <React.Fragment>\r\n          <h2 className=\"impact\">\r\n            That's the equivalent carbon saving of planting {result} trees.\r\n            Legend.\r\n          </h2>\r\n          <img className=\"image\" src={trees} alt=\"Trees\" height=\"300px\" />\r\n          {this.backToStart}\r\n        </React.Fragment>\r\n      );\r\n    } else if (this.props.type === 1) {\r\n      return (\r\n        <React.Fragment>\r\n          <h2 className=\"impact\">\r\n            That's the equivalent carbon saving of taking {result} cars off the\r\n            road for a year. Nice.\r\n          </h2>\r\n          <img className=\"image\" src={cars} alt=\"Cars\" height=\"300px\" />\r\n          {this.backToStart}\r\n        </React.Fragment>\r\n      );\r\n    } else if (this.props.type === 2) {\r\n      return (\r\n        <React.Fragment>\r\n          <h2 className=\"impact\">\r\n            That carbon saving is the same weight as {result} Beluga whales.\r\n            Wow.\r\n          </h2>\r\n          <img\r\n            className=\"image\"\r\n            src={beluga}\r\n            alt=\"Beluga whale\"\r\n            height=\"300px\"\r\n          />\r\n          {this.backToStart}\r\n        </React.Fragment>\r\n      );\r\n    } else if (this.props.type === 3) {\r\n      return (\r\n        <React.Fragment>\r\n          <h2 className=\"impact\">\r\n            That's the same carbon saving as convincing {result} people to go\r\n            vegan for a year. As if!\r\n          </h2>\r\n          <img className=\"image\" src={vegan} alt=\"Carrots\" height=\"300px\" />\r\n          {this.backToStart}\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//impact calculator\r\nfunction impact(calls, emails, type) {\r\n  var intCalls = Math.floor(calls);\r\n  var intEmails = Math.floor(emails);\r\n  const members = intCalls + intEmails;\r\n  if (type === 0) {\r\n    const trees = members * 760;\r\n    return trees.toFixed(2).replace(/\\.?0+$/, \"\");\r\n  }\r\n  if (type === 1) {\r\n    const cars = members * 7.4;\r\n    return cars.toFixed(2).replace(/\\.?0+$/, \"\");\r\n  }\r\n  if (type === 2) {\r\n    const whales = members * 0.97;\r\n    return whales.toFixed(2).replace(/\\.?0+$/, \"\");\r\n  } else {\r\n    const vegans = members * 0.46;\r\n    return vegans.toFixed(2).replace(/\\.?0+$/, \"\");\r\n  }\r\n}\r\n\r\nexport default Step3;\r\n","function getRandomInt(max) {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport default getRandomInt;\r\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport PropTypes from \"prop-types\";\nimport Step1 from \"./Step1.js\";\nimport Step2 from \"./Step2.js\";\nimport Step3 from \"./Step3.js\";\nimport header from \"./header.jpg\";\nimport getRandomInt from \"./getRandomInt\";\n\n// MasterForm is the parent component (sends data and functions to children by props, and receives inputs from children by states)\nclass MasterForm extends Component {\n  constructor(props) {\n    // set initial input values, with default step as step 1 and random first type\n    const type = getRandomInt(4);\n    super(props);\n    this.state = {\n      currentStep: 1,\n      calls: \"\",\n      emails: \"\",\n      type: type\n    };\n    // bind the submission to handleChange()\n    this.handleChange = this.handleChange.bind(this);\n    // bind functions for next, previous and back to start\n    this._next = this._next.bind(this);\n    this._prev = this._prev.bind(this);\n    this._toStart = this._toStart.bind(this);\n  }\n\n  // use the submitted data to set the state\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  _next() {\n    let currentStep = this.state.currentStep;\n    // if current step is 1 or 2, add 1 on \"next\" button click\n    currentStep = currentStep >= 2 ? 3 : currentStep + 1;\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n  _prev() {\n    let currentStep = this.state.currentStep;\n    // if current step is 2, subtract 1 on \"prev\" button click\n    currentStep = currentStep <= 1 ? 1 : currentStep - 1;\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n  _toStart() {\n    let currentStep = this.state.currentStep;\n    // if current step is 3, set current step to 1 on \"toStart\" button click\n    if (currentStep === 3) {\n      const type = getRandomInt(4);\n      this.setState({ currentStep: 1, type: type });\n    }\n  }\n\n  // button function\n  get button() {\n    let currentStep = this.state.currentStep;\n    if (currentStep === 1) {\n      return (\n        <div className=\"button\">\n          <button className=\"button\" type=\"button\" onClick={this._next}>\n            Next\n          </button>\n        </div>\n      );\n    }\n    if (currentStep === 2) {\n      return (\n        <div className=\"button-box\">\n          <div className=\"button-previous\">\n            <button\n              className=\"button-previous\"\n              type=\"button\"\n              onClick={this._prev}\n            >\n              Previous\n            </button>\n          </div>\n          <div className=\"button-impact\">\n            <button\n              className=\"button-impact\"\n              type=\"button\"\n              onClick={this._next}\n            >\n              See my impact\n            </button>\n          </div>\n        </div>\n      );\n    }\n    if (currentStep === 3) {\n      return (\n        <div className=\"button\">\n          <button className=\"button\" type=\"button\" onClick={this._toStart}>\n            Start again\n          </button>\n        </div>\n      );\n    }\n    return null;\n  }\n\n  // render UI here\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"header\">\n          <img className=\"logo\" src={header} alt=\"Bulb logo\" />\n        </div>\n        <form className=\"form\" onSubmit={this.handleSubmit}>\n          {/* Render the form steps and pass in the required props */}\n          <div className=\"step\">\n            <Step1\n              currentStep={this.state.currentStep}\n              handleChange={this.handleChange}\n              calls={this.state.calls}\n            />\n            <Step2\n              currentStep={this.state.currentStep}\n              handleChange={this.handleChange}\n              emails={this.state.emails}\n            />\n            <Step3\n              currentStep={this.state.currentStep}\n              handleChange={this.handleChange}\n              calls={this.state.calls}\n              emails={this.state.emails}\n              type={this.state.type}\n            />\n          </div>\n          <div className=\"button-container\">{this.button}</div>\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nMasterForm.propTypes = {\n  currentStep: PropTypes.number,\n  calls: PropTypes.number,\n  emails: PropTypes.number,\n  type: PropTypes.number\n};\n\nReactDOM.render(<MasterForm />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// Next steps:\n// 1. Tests\n// 2. Accessibility\n// 3. Not allow very high or negative inputs\n"],"sourceRoot":""}